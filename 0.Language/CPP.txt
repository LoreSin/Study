C++ 입출력
	std::cout (콘솔출력;모니터) // std::cin (콘솔 입력;키보드)
	cout << ~~(변수또는 자료등)
	std::endl (줄바꿈)


함수 오버로딩
	입력 파라매터의 갯수가 겹치더라도, 자료형에 따라 다른 함수를 호출
	void func(int a);
	void func(char a);
	void func(float a);
	func('a');
	func(1);
	func(3.5);

 	등으로, 다르게 호출 되는 방식으로 동작한다. 

	
함수 기본값
	func(3.5, a = 4);
	a = 4 와 같이, 기본값을 지정하여 사용자입력을 받을수도, 생략시 기본값을 사용함.
	오버로딩은 *기본값이 지정되지 않은 파라매터* 를 기준으로 중복되면 안된다.


이름공간 (namespace)
	여러개의 외부함수들을 사용할때, 구분을 짓는 추가적인 수식명
	std::cin >> a;
	std::cout << "출력이다" << std::endl;
	std 은 iostream 의 기본 네임스페이스.

	이름공간 정의
	namespane 공간명{
		함수 및 상수와 변수등 정의
	}

	using 키워드
	해당 이름공간을 파일내용을 사용하기 위한 것.
	
	using namespace 공간명;
	using namespace 공간명::변수명|함수명 ;
	이렇게 하면, 해당 코드내에서 공간명을 생략하고 사용가능
	단, 다른 공간에 같은 이름을 가진 변수|함수가 존재하면, 에러가 발생하므로, 가급적 적게 사용하거나, 외부함수이름을 최대한 확인하고 사용할것.

	using namespace std;
	cout << endl; 처럼 사용가능. 


참조자 (Reference)
	& 를 이용해 선언한 변수를 말하며, 기존 변수에 또 다른 이름을 붙여쓰는 것.
	int a = 10;
	int &c = a;
	c 는 a 를 부르는 다른 형태의 이름이 되며, 주소값 까지 일치함.

	참조자 조건
		선언시 부터 반드시 누군가를 참조해야함.
		상수를 참조 할 수는 없다.
		NULL 등으로 초기화하는것도 불가능 하다.

	배열을 참조자로 개별 접근 하는 방법은 용이할법 하다.
	int arr[3] = {1,2,3};
	int& ref1 = arr[0];
	int& ref2 = arr[1];
	int& ref3 = arr[2];
	ref1~ref3 은 각 어레이의 원소를 하나씩을 대신하여 표현된다.

	Call by Reference (참조호출)
	void func(int &a, int &b)
	포인터와 같이 외부의 변수값을 받아오는 형식.

	
클래스
	class 클래스명{
	public: // 이후의 함수 공개
		static int 스태틱변수명 : 일종의 클래스 공유변수
		static const int 스태틱상수명 : 일종의 클래스 공유상수
		int 변수명1
		double 변수명2
		void 함수명(파라매터) ; 함수 대신 메소드라 부름
		virtual void 함수명(); 가상함수
	}

	구조체의 확장형. 변수명을 숨길수 있고, 클래스용 함수를 정의 하기도 함. 
	protected 를 이용해 변수나 함수를 외부에서 사용하지 못하게 할수 있음.

	클래스명 객체명(변수명);
	클래스 선언 한 것을 객체라 부름.

	스태틱변수는 클래스로 직접 접근할수 있고, 객체에서도 접근가능.
	static 붙이면 클래스단위로 승격. (클래스 or 객체들이 접근가능.)
	const 붙이면 수정불가. (상수화)




클래스 메소드
	일반적인 함수는 모든 파라매터를 받아야 하지만, 클래스는 "자신" 을 받지 않아도 넘길수 있음.
	[this] 키워드를 이용해, 자신을 호출 할수 있음.

	객체명.메소드명(파라매터)

	~~ 클래스명::메소드명(~~){
		this->변수명1;
	}

	this->변수명의 this 키워드는 객체 자신을 가리켜, 메소드에서 자신의 멤버변수를 접근케 함.


클래스 대입의 방법
	Person *p1 = new Person(15, 160);
	Person p2 = p1; // 객체 간 변수값을 복사
	Person *p3 = p1; // 클래스를 참조하는 변수


클래스 상속
	class 자식명 : public 부모명 // 클래스 정의 상속
		자식명(파라매터) : 부모명(파라매터); // 초기화함수 상속

	오버라이드
		같은 함수를 다시 정의하면 (파라매터의 형&개수까지 동일시) 덮어씀
	생성자 오버로드
		함수오버로드의 생성자 버젼. (파라매터의 개수에 따라 다른 유형으로 초기화 되는 방식.)


가상함수 (virtual)
	상위클래스함수 선언시에 붙여쓴다.
	하위클래스에서 재정의 하였을때, 상위클래스(참조 or 포인터 변수)로 접근하여, 실행할수 있는 함수를 말한다.

	class person{
	~~
		virtual void printInfo(){사람정보}
		virtual void printInfo() = 0;
		virtual void printInfo() = NULL; // 3가지 방법.
	}
	class student:public person{
	~~
		void printInfo(){학생정보}
	}
	class doctorpublic person{
	~~
		void printInfo(){의사정보}
	}

	이렇게 정의된 하위 클래스 (student, doctor) 의 printInfo 함수는, 상위클래스에서 정의된 함수로 접근이 가능하다는 뜻.

	void printInfo(person *p){
		p->printInfo();
	}

	person p;
	student* s = new student();
	doctor* d = new doctor();
	p = *s;
	p->printInfo(); // 학생정보를 출력
	printInfo(s); // 학생정보를 출력
	p = *d;
	p->printInfo(); // 의사정보를 출력
	printInfo(d);  // 의사정보를 출력

	타 언어에서는 상위인터페이스 클래스(자바) 나 추상클래스(파이썬~) 를 상속받은 하위클래스로, 해당 함수나 변수를 이용한 처리를 정의함.

연산자 오버로드
	함수명을 operator+ 등으로, 연산자를 넣어서, 함수를 정의 함.
	위의 함수명의 경우, X+Y 의 데이터형등이 맞다면, 수행하는 기능을 함.

string 
	문자열을 쉽게 쓸수 있게 해주는 클래스.
	iostream 을 인클루드 필요

template 과 typename
	클래스에 데이터형을 다양하게 정의하는 방법.
	template <typename T>
	template <typename T, typename A>
	class{
		T name;
		T Id;
		A password;
	}

	typename A은 자료명을 받아서, 변수를 해당 자료형으로 바꾸어서 적용 해준다는 의미. (일종의 가상자료형?)


예외처리 (exception)
	C스타일 에선 리턴값을 -1 내지는 비정상적인 값을 통해, 코드에서 확인하는 형태

	int div(int a, int b){
		if (b==0) return -1;
		else return a/b
	}

	float e = div(10, 0)
	if (e == -1) printf("error");
	else printf("%f", &e);

	CPP 스타일에선 고유의 문법이 별도로 존재.
	try ~ catch 와 throw 를 이용.

	int div(int a, int b){
		if (b==0) throw -1;
		else return a/b
	}

	try{
	int result = div(10, 0)
	}
	catch(int e)
	{
		~~~~
	}

	만약, 에러가 검출되어 throw 가 실행될시, 바로 catch 구문을 실행하러 넘어간다.






